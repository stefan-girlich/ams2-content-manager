import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent, OpenDialogOptions } from 'electron'
import installModFromArchive from './backend/common/installModFromArchive'
import listModsAndSyncStatus from './backend/common/listMods'
import loadUserSettings from './backend/settings/loadUserSettings'
import saveUserSettings from './backend/settings/saveUserSettings'
import UserSettings from './common/@types/UserSettings'
import { MODS_DIR } from './config'
import requestFileSelection from './backend/common/requestFileSelection'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit()
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        width: 1280,
        height: 1024,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    })

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

    // Open the DevTools.
    mainWindow.webContents.openDevTools()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    createWindow()
})

// core domain operations
ipcMain.handle('list-mods', () => listModsAndSyncStatus(MODS_DIR))
ipcMain.handle('install-mod', (_: IpcMainInvokeEvent, modArchiveFilePath: string) =>
    installModFromArchive(modArchiveFilePath)
)
ipcMain.handle('load-user-settings', () => loadUserSettings())
ipcMain.handle('save-user-settings', (_: IpcMainInvokeEvent, data: UserSettings) => saveUserSettings(data))
ipcMain.handle('request-file-selection', (_, options: OpenDialogOptions) => requestFileSelection(options))

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit()
    }
})

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow()
    }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
